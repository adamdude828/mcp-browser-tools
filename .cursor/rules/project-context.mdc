---
description: 
globs: 
alwaysApply: true
---
# MCP Browser Connect Project

This document provides context about the MCP Browser Connect project for LLM assistance.

## tools
1. browser_get_title - Get the title of the currently selected tab. 
2. browser_get_zones - Get all the zones selected. 
3. browser_get_zone_details -  Get the details from any one zone. 


## Project Overview

MCP Browser Connect is a system that allows LLMs to interact with browser tabs through a Chrome extension. The project consists of two main components:

1. **MCP Server**: A TypeScript server implementing the Model Context Protocol (MCP) with browser integration tools.
2. **Chrome Extension**: A browser extension that communicates with the MCP server via Socket.IO.

## Key Features

- **Tab Title Tool**: Currently, the primary tool allows retrieving the title and URL of the active browser tab in real-time.
- **Real-time Communication**: Uses Socket.IO for bidirectional communication between the server and extension.
- **MCP Integration**: Implements the Model Context Protocol for standardized LLM tool interactions.
- **Expandable Architecture**: Designed for future expansion with additional browser interaction tools.

## Architecture

```
┌─────────────┐    Socket.IO    ┌─────────────┐    MCP     ┌─────────────┐
│   Chrome    │◄──────────────►│  HTTP/MCP   │◄──────────►│    LLM      │
│  Extension  │                │   Server    │            │  (Claude)    │
└─────────────┘                └─────────────┘            └─────────────┘
```

## Technical Implementation

- The HTTP server provides Socket.IO endpoints and MCP protocol support
- The extension connects to the server and responds to requests for tab information
- Currently, the MCP tool `browser_get_title` retrieves the active tab's title and URL
- Socket handlers properly route messages between the extension and MCP server
- The codebase is organized to easily add more browser interaction tools in the future

## Code Structure

### HTTP Server

- `http-server/`: Contains the MCP and HTTP server implementation
  - `src/tools/tabs.js`: Implements the tab title tool and socket handlers
  - `src/index.ts`: Main server setup and initialization

### Extension

- `extension/`: Contains the Chrome extension implementation
  - `window.html`: The main window UI for the extension
  - `window.js`: Initializes and connects modules for the extension UI
  - `content-script.js`: Injected into web pages for DOM interaction
  - `popup.js`: Handles the extension popup UI
  - `popup.html`: The extension popup UI
  - `manifest.json`: Chrome extension configuration
  - `background.js`: Background service worker for the extension

#### Modular Architecture

The extension implements a modular architecture with the following components:

- `extension/js/modules/`: Contains modular components of the extension
  - `SocketConnectionManager.js`: Manages Socket.IO connections
    - Handles connecting/disconnecting from the server
    - Manages socket events and message routing
    - Provides Promise-based API for socket operations
  - `TabManager.js`: Manages browser tabs
    - Handles tab selection, navigation, and updates
    - Keeps track of active and previously selected tabs
    - Provides methods for querying and manipulating tabs
  - `UIUpdater.js`: Manages UI updates
    - Updates tab lists and displays
    - Manages status messages and UI state
    - Handles logging and error display
  - `ElementSelectionManager.js`: Manages element selection
    - Controls element selection mode
    - Handles highlighting and clearing elements
    - Manages selected elements list
  - `index.js`: Exports all modules for easy importing

## Module Interaction Flow

```
                      ┌─────────────────┐
                      │    window.js    │
                      │  (Entry Point)  │
                      └────────┬────────┘
                               │
               ┌───────────────┼───────────────┐
               │               │               │
    ┌──────────▼─────┐ ┌───────▼────────┐ ┌────▼─────────────┐
    │ TabManager.js  │ │ UIUpdater.js   │ │ SocketConnection │
    │                │ │                │ │    Manager.js    │
    └──────────┬─────┘ └───────┬────────┘ └────┬─────────────┘
               │               │               │
               └───────────────▼───────────────┘
                               │
                     ┌─────────▼──────────┐
                     │ ElementSelection   │
                     │    Manager.js      │
                     └────────────────────┘
```

## Current Limitations and Future Plans

- The system currently focuses on getting the title and URL of the active tab
- No caching is performed at the HTTP server layer; data is always fetched directly from the extension
- The extension must be connected to the server for the tools to work
- **Future Expansion**: The project will be extended with additional browser interaction tools such as:
  - Page navigation and tab management
  - Content extraction and manipulation
  - Browser automation features
  - Screenshot and visual inspection capabilities

## Development Approach

We're building this iteratively, starting with the core tab title functionality and expanding with additional tools as needed. The codebase is structured with this expansion in mind, using a modular approach that separates concerns and allows for easy addition of new features.

## Adding New Features

When adding new features to the extension:

- Socket-related functionality should be added to SocketConnectionManager.js
- Tab management functionality should be added to TabManager.js
- UI updates and rendering should be added to UIUpdater.js
- Element selection and DOM interaction should be added to ElementSelectionManager.js
- Non-specific utility functions should be considered for shared utility modules (upcoming)

This context will help LLMs understand the project's purpose, architecture, implementation, and future direction when providing assistance with the MCP Browser Connect codebase.