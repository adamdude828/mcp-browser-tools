---
description: 
globs: 
alwaysApply: true
---
# MCP Browser Connect Project

This document provides context about the MCP Browser Connect project for LLM assistance.

## Project Overview

MCP Browser Connect is a system that allows LLMs to interact with browser tabs through a Chrome extension. The project consists of two main components:

1. **MCP Server**: A TypeScript server implementing the Model Context Protocol (MCP) with browser integration tools.
2. **Chrome Extension**: A browser extension that communicates with the MCP server via Socket.IO.

## Key Features

- **Tab Title Tool**: Currently, the primary tool allows retrieving the title and URL of the active browser tab in real-time.
- **Real-time Communication**: Uses Socket.IO for bidirectional communication between the server and extension.
- **MCP Integration**: Implements the Model Context Protocol for standardized LLM tool interactions.
- **Expandable Architecture**: Designed for future expansion with additional browser interaction tools.

## Architecture

```
┌─────────────┐    Socket.IO    ┌─────────────┐    MCP     ┌─────────────┐
│   Chrome    │◄──────────────►│  HTTP/MCP   │◄──────────►│    LLM      │
│  Extension  │                │   Server    │            │  (Claude)    │
└─────────────┘                └─────────────┘            └─────────────┘
```

## Technical Implementation

- The HTTP server provides Socket.IO endpoints and MCP protocol support
- The extension connects to the server and responds to requests for tab information
- Currently, the MCP tool `browser_get_title` retrieves the active tab's title and URL
- Socket handlers properly route messages between the extension and MCP server
- The codebase is organized to easily add more browser interaction tools in the future

## Code Structure

- `http-server/`: Contains the MCP and HTTP server implementation
  - `src/tools/tabs.js`: Implements the tab title tool and socket handlers
  - `src/index.ts`: Main server setup and initialization
- `extension/`: Contains the Chrome extension implementation
  - `window.js`: Handles the extension UI and Socket.IO communication

## Current Limitations and Future Plans

- The system currently focuses on getting the title and URL of the active tab
- No caching is performed at the HTTP server layer; data is always fetched directly from the extension
- The extension must be connected to the server for the tools to work
- **Future Expansion**: The project will be extended with additional browser interaction tools such as:
  - Page navigation and tab management
  - Content extraction and manipulation
  - Browser automation features
  - Screenshot and visual inspection capabilities

## Development Approach

We're building this iteratively, starting with the core tab title functionality and expanding with additional tools as needed. The codebase is structured with this expansion in mind, using a modular approach that separates concerns and allows for easy addition of new features.

This context will help LLMs understand the project's purpose, architecture, implementation, and future direction when providing assistance with the MCP Browser Connect codebase.